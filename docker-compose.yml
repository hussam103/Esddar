version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: esddar_app
    restart: always
    ports:
      - "80:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # Add other environment variables as needed
      # - PINECONE_API_KEY=${PINECONE_API_KEY}
      # - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      # - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      # - VITE_STRIPE_PUBLIC_KEY=${VITE_STRIPE_PUBLIC_KEY}
      # - SESSION_SECRET=${SESSION_SECRET}
    depends_on:
      - db
    networks:
      - esddar_network
    volumes:
      - app_data:/app/data
      - ./logs:/app/logs

  db:
    image: postgres:15-alpine
    container_name: esddar_db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - esddar_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # If you want to add nginx as a reverse proxy for SSL termination
  nginx:
    image: nginx:alpine
    container_name: esddar_nginx
    restart: always
    ports:
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - esddar_network

networks:
  esddar_network:
    driver: bridge

volumes:
  postgres_data:
  app_data: